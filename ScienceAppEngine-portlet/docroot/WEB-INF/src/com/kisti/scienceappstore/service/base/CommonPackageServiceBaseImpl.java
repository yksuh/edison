/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.scienceappstore.service.base;

import com.kisti.scienceappstore.model.CommonPackage;
import com.kisti.scienceappstore.service.CommonPackageService;
import com.kisti.scienceappstore.service.persistence.CommonLibraryPersistence;
import com.kisti.scienceappstore.service.persistence.CommonModulePersistence;
import com.kisti.scienceappstore.service.persistence.CommonPackagePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the common package remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.kisti.scienceappstore.service.impl.CommonPackageServiceImpl}.
 * </p>
 *
 * @author yksuh
 * @see com.kisti.scienceappstore.service.impl.CommonPackageServiceImpl
 * @see com.kisti.scienceappstore.service.CommonPackageServiceUtil
 * @generated
 */
public abstract class CommonPackageServiceBaseImpl extends BaseServiceImpl
	implements CommonPackageService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.kisti.scienceappstore.service.CommonPackageServiceUtil} to access the common package remote service.
	 */

	/**
	 * Returns the common library local service.
	 *
	 * @return the common library local service
	 */
	public com.kisti.scienceappstore.service.CommonLibraryLocalService getCommonLibraryLocalService() {
		return commonLibraryLocalService;
	}

	/**
	 * Sets the common library local service.
	 *
	 * @param commonLibraryLocalService the common library local service
	 */
	public void setCommonLibraryLocalService(
		com.kisti.scienceappstore.service.CommonLibraryLocalService commonLibraryLocalService) {
		this.commonLibraryLocalService = commonLibraryLocalService;
	}

	/**
	 * Returns the common library remote service.
	 *
	 * @return the common library remote service
	 */
	public com.kisti.scienceappstore.service.CommonLibraryService getCommonLibraryService() {
		return commonLibraryService;
	}

	/**
	 * Sets the common library remote service.
	 *
	 * @param commonLibraryService the common library remote service
	 */
	public void setCommonLibraryService(
		com.kisti.scienceappstore.service.CommonLibraryService commonLibraryService) {
		this.commonLibraryService = commonLibraryService;
	}

	/**
	 * Returns the common library persistence.
	 *
	 * @return the common library persistence
	 */
	public CommonLibraryPersistence getCommonLibraryPersistence() {
		return commonLibraryPersistence;
	}

	/**
	 * Sets the common library persistence.
	 *
	 * @param commonLibraryPersistence the common library persistence
	 */
	public void setCommonLibraryPersistence(
		CommonLibraryPersistence commonLibraryPersistence) {
		this.commonLibraryPersistence = commonLibraryPersistence;
	}

	/**
	 * Returns the common module local service.
	 *
	 * @return the common module local service
	 */
	public com.kisti.scienceappstore.service.CommonModuleLocalService getCommonModuleLocalService() {
		return commonModuleLocalService;
	}

	/**
	 * Sets the common module local service.
	 *
	 * @param commonModuleLocalService the common module local service
	 */
	public void setCommonModuleLocalService(
		com.kisti.scienceappstore.service.CommonModuleLocalService commonModuleLocalService) {
		this.commonModuleLocalService = commonModuleLocalService;
	}

	/**
	 * Returns the common module remote service.
	 *
	 * @return the common module remote service
	 */
	public com.kisti.scienceappstore.service.CommonModuleService getCommonModuleService() {
		return commonModuleService;
	}

	/**
	 * Sets the common module remote service.
	 *
	 * @param commonModuleService the common module remote service
	 */
	public void setCommonModuleService(
		com.kisti.scienceappstore.service.CommonModuleService commonModuleService) {
		this.commonModuleService = commonModuleService;
	}

	/**
	 * Returns the common module persistence.
	 *
	 * @return the common module persistence
	 */
	public CommonModulePersistence getCommonModulePersistence() {
		return commonModulePersistence;
	}

	/**
	 * Sets the common module persistence.
	 *
	 * @param commonModulePersistence the common module persistence
	 */
	public void setCommonModulePersistence(
		CommonModulePersistence commonModulePersistence) {
		this.commonModulePersistence = commonModulePersistence;
	}

	/**
	 * Returns the common package local service.
	 *
	 * @return the common package local service
	 */
	public com.kisti.scienceappstore.service.CommonPackageLocalService getCommonPackageLocalService() {
		return commonPackageLocalService;
	}

	/**
	 * Sets the common package local service.
	 *
	 * @param commonPackageLocalService the common package local service
	 */
	public void setCommonPackageLocalService(
		com.kisti.scienceappstore.service.CommonPackageLocalService commonPackageLocalService) {
		this.commonPackageLocalService = commonPackageLocalService;
	}

	/**
	 * Returns the common package remote service.
	 *
	 * @return the common package remote service
	 */
	public com.kisti.scienceappstore.service.CommonPackageService getCommonPackageService() {
		return commonPackageService;
	}

	/**
	 * Sets the common package remote service.
	 *
	 * @param commonPackageService the common package remote service
	 */
	public void setCommonPackageService(
		com.kisti.scienceappstore.service.CommonPackageService commonPackageService) {
		this.commonPackageService = commonPackageService;
	}

	/**
	 * Returns the common package persistence.
	 *
	 * @return the common package persistence
	 */
	public CommonPackagePersistence getCommonPackagePersistence() {
		return commonPackagePersistence;
	}

	/**
	 * Sets the common package persistence.
	 *
	 * @param commonPackagePersistence the common package persistence
	 */
	public void setCommonPackagePersistence(
		CommonPackagePersistence commonPackagePersistence) {
		this.commonPackagePersistence = commonPackagePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CommonPackage.class;
	}

	protected String getModelClassName() {
		return CommonPackage.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = commonPackagePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.kisti.scienceappstore.service.CommonLibraryLocalService.class)
	protected com.kisti.scienceappstore.service.CommonLibraryLocalService commonLibraryLocalService;
	@BeanReference(type = com.kisti.scienceappstore.service.CommonLibraryService.class)
	protected com.kisti.scienceappstore.service.CommonLibraryService commonLibraryService;
	@BeanReference(type = CommonLibraryPersistence.class)
	protected CommonLibraryPersistence commonLibraryPersistence;
	@BeanReference(type = com.kisti.scienceappstore.service.CommonModuleLocalService.class)
	protected com.kisti.scienceappstore.service.CommonModuleLocalService commonModuleLocalService;
	@BeanReference(type = com.kisti.scienceappstore.service.CommonModuleService.class)
	protected com.kisti.scienceappstore.service.CommonModuleService commonModuleService;
	@BeanReference(type = CommonModulePersistence.class)
	protected CommonModulePersistence commonModulePersistence;
	@BeanReference(type = com.kisti.scienceappstore.service.CommonPackageLocalService.class)
	protected com.kisti.scienceappstore.service.CommonPackageLocalService commonPackageLocalService;
	@BeanReference(type = com.kisti.scienceappstore.service.CommonPackageService.class)
	protected com.kisti.scienceappstore.service.CommonPackageService commonPackageService;
	@BeanReference(type = CommonPackagePersistence.class)
	protected CommonPackagePersistence commonPackagePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CommonPackageServiceClpInvoker _clpInvoker = new CommonPackageServiceClpInvoker();
}